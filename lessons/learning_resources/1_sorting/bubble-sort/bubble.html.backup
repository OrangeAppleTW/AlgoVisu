<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>氣泡排序 - 排序演算法視覺化</title>
    <link rel="stylesheet" href="../../styles.css">
    <link rel="stylesheet" href="../module-styles.css">
    <!-- 引入D3.js庫 -->
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        /* 黑白簡約風格 */
        h2 {
            color: #222;
            margin-top: 20px;
            margin-bottom: 15px;
            font-size: 1.5em;
        }
        
        .visualization-container {
            background-color: white;
            border-radius: 4px;
            border: 1px solid #e0e0e0;
            padding: 20px;
            margin: 30px 0;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }
        
        .controls {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin: 15px 0;
            justify-content: center;
        }
        
        button {
            background-color: #222;
            color: white;
            border: none;
            padding: 10px 18px;
            border-radius: 3px;
            cursor: pointer;
            transition: background-color 0.2s, transform 0.1s;
            font-size: 14px;
            font-weight: normal;
        }
        
        button:hover {
            background-color: #000;
            transform: translateY(-2px);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        
        button:disabled {
            background-color: #999;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .slider-container {
            margin: 15px auto;
            display: flex;
            align-items: center;
            gap: 10px;
            max-width: 300px;
            justify-content: center;
        }
        
        .slider {
            flex-grow: 1;
            max-width: 250px;
            -webkit-appearance: none;
            height: 5px;
            background: #ddd;
            border-radius: 5px;
            outline: none;
        }
        
        .slider::-webkit-slider-runnable-track {
            width: 100%;
            height: 5px;
            background: linear-gradient(to right, #222 0%, #222 var(--progress-percent, 50%), #ddd var(--progress-percent, 50%), #ddd 100%);
            border-radius: 5px;
            cursor: pointer;
            position: relative;
            top: 0px;
        }
        
        .slider::-moz-range-track {
            width: 100%;
            height: 5px;
            background: #ddd;
            border-radius: 5px;
            cursor: pointer;
        }
        
        .slider::-moz-range-progress {
            height: 5px;
            background-color: #222;
            border-radius: 5px;
        }
        
        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 15px;
            height: 15px;
            border-radius: 50%;
            background: #222;
            cursor: pointer;
            margin-top: -5px;
        }
        
        .slider::-moz-range-thumb {
            width: 15px;
            height: 15px;
            border-radius: 50%;
            background: #222;
            cursor: pointer;
            border: none;
            margin-top: -5px;
        }
        
        .legend {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin: 15px 0;
            padding: 10px;
            background-color: transparent;
            border-radius: 3px;
            justify-content: center;
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .legend-color {
            width: 16px;
            height: 16px;
            border-radius: 3px;
            border: 1px solid rgba(0, 0, 0, 0.1);
        }
        
        .code-container {
            margin: 30px 0;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            overflow: hidden;
        }
        
        .code-tabs {
            display: flex;
            background-color: #f5f5f5;
            border-bottom: 1px solid #e0e0e0;
        }
        
        .code-tab {
            padding: 10px 15px;
            cursor: pointer;
            border-right: 1px solid #e0e0e0;
            transition: background-color 0.2s;
        }
        
        .code-tab:hover {
            background-color: #eaeaea;
        }
        
        .code-tab.active {
            background-color: #222;
            color: white;
        }
        
        .code-view {
            display: none;
            padding: 15px;
            background-color: #f8f8f8;
            white-space: pre-wrap;
            font-family: monospace;
            line-height: 1.5;
            font-size: 0.95em;
            color: #333;
        }
        
        .code-view.active {
            display: block;
        }
        
        h3 {
            font-size: 1.1em;
            margin-top: 25px;
            margin-bottom: 10px;
            color: #333;
            border-bottom: 1px solid #eee;
            padding-bottom: 5px;
        }
        
        svg {
            background-color: #f8f8f8;
            border: 1px solid #eee;
            border-radius: 3px;
        }
        
        .tabs {
            display: flex;
            border-bottom: 1px solid #ddd;
            margin-bottom: 20px;
        }
        
        .tab {
            padding: 10px 15px;
            cursor: pointer;
            transition: background-color 0.2s;
            font-weight: bold;
            color: #555;
        }
        
        .tab:hover {
            background-color: #f5f5f5;
        }
        
        .tab.active {
            border-bottom: 2px solid #222;
            color: #222;
        }
        
        .status {
            text-align: center;
            margin: 10px 0;
            padding: 8px;
            background-color: #f8f8f8;
            border-radius: 3px;
            color: #555;
        }

        /* 統計資訊區域 */
        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }

        .stat-box {
            background-color: #f8f8f8;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            padding: 15px;
            text-align: center;
        }

        .stat-label {
            font-size: 0.9em;
            color: #666;
            margin-bottom: 5px;
        }

        .stat-value {
            font-size: 1.8em;
            font-weight: bold;
            color: #222;
        }

        /* 複雜度分析區域 */
        .complexity-analysis {
            margin: 30px 0;
            background-color: white;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            padding: 20px;
        }

        .complexity-tabs {
            display: flex;
            border-bottom: 1px solid #ddd;
            margin-bottom: 20px;
        }

        .complexity-tab {
            padding: 10px 15px;
            cursor: pointer;
            transition: background-color 0.2s;
            border-right: 1px solid #ddd;
        }

        .complexity-tab:hover {
            background-color: #f5f5f5;
        }

        .complexity-tab.active {
            background-color: #222;
            color: white;
        }

        .complexity-content {
            display: none;
        }

        .complexity-content.active {
            display: block;
        }

        /* 圖表容器 */
        .chart-container {
            margin: 20px 0;
            text-align: center;
        }

        .chart-title {
            font-size: 1.1em;
            margin-bottom: 10px;
            color: #333;
        }

        /* 理論與實際比較 */
        .comparison-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 20px 0;
        }

        @media (max-width: 768px) {
            .comparison-container {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="navbar-container">
            <a href="../../index.html" class="navbar-logo">
                <img src="../../picture/OA_logo2.png" alt="OA Logo" class="logo-img">
            </a>
            <div class="navbar-links">
                <div class="nav-dropdown">
                    <a href="#" class="nav-link dropdown-toggle">APCS進階班</a>
                    <div class="dropdown-menu">
                        <div class="dropdown-section">
                            <h4>APCS教學資源</h4>
                            <a href="../../3_maze_recursion/index.html" class="dropdown-link">老鼠走迷宮</a>
                        </div>
                    </div>
                </div>
                <div class="nav-dropdown">
                    <a href="#" class="nav-link dropdown-toggle">學習資源</a>
                    <div class="dropdown-menu">
                        <a href="../../1_sorting/index.html" class="dropdown-link">排序演算法</a>
                        <a href="../../2_2d_linked_list/index.html" class="dropdown-link">二維鏈表</a>
                    </div>
                </div>
            </div>
        </div>
    </nav>
    <div class="container">
        <div class="tabs">
            <div class="tab active" data-tab="bubble">氣泡排序</div>
            <div class="tab" data-tab="selection">選擇排序</div>
            <div class="tab" data-tab="insertion">插入排序</div>
            <div class="tab" data-tab="quick">快速排序</div>
            <div class="tab" data-tab="merge">合併排序</div>
        </div>
        
        <div id="bubble" class="tab-content active">
            <h2>氣泡排序 (Bubble Sort)</h2>
            <p>氣泡排序是一種簡單的排序演算法，它重複地遍歷要排序的數組，比較每對相鄰的元素，如果它們的順序錯誤則交換它們。</p>
            
            <div class="visualization-container">
                <!-- D3.js 視覺化區域 -->
                <svg id="bubble-svg" width="100%" height="240"></svg>
                <div class="status" id="bubble-status">請點擊「生成數組」按鈕開始</div>
            </div>
            
            <div class="controls">
                <button id="bubble-generate">生成數組</button>
                <button id="bubble-start" disabled>開始排序</button>
                <button id="bubble-pause" disabled>暫停</button>
                <button id="bubble-reset" disabled>重置</button>
            </div>
            
            <div class="slider-container">
                <label for="bubble-speed">速度:</label>
                <input type="range" id="bubble-speed" class="slider" min="1" max="100" value="50">
            </div>
            
            <div class="legend">
                <div class="legend-item">
                    <div class="legend-color" style="background-color: #A0AEC0;"></div>
                    <span>未排序</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background-color: #4A5568;"></div>
                    <span>正在比較</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background-color: #2B6CB0;"></div>
                    <span>正在交換</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background-color: #1A365D;"></div>
                    <span>已排序</span>
                </div>
            </div>

            <!-- 統計資訊區域 -->
            <div class="stats-container">
                <div class="stat-box">
                    <div class="stat-label">交換次數</div>
                    <div class="stat-value" id="swap-count">0</div>
                </div>
                <div class="stat-box">
                    <div class="stat-label">比較次數</div>
                    <div class="stat-value" id="comparison-count">0</div>
                </div>
                <div class="stat-box">
                    <div class="stat-label">已完成輪數</div>
                    <div class="stat-value" id="round-count">0</div>
                </div>
                <div class="stat-box">
                    <div class="stat-label">數組大小</div>
                    <div class="stat-value" id="array-size">0</div>
                </div>
            </div>

            <!-- 複雜度分析區域 -->
            <div class="complexity-analysis">
                <h3>時間複雜度分析</h3>
                
                <div class="complexity-tabs">
                    <div class="complexity-tab active" data-complexity="realtime">實時統計</div>
                    <div class="complexity-tab" data-complexity="theoretical">理論分析</div>
                    <div class="complexity-tab" data-complexity="comparison">比較圖表</div>
                </div>

                <!-- 實時統計 -->
                <div class="complexity-content active" id="realtime">
                    <div class="chart-container">
                        <div class="chart-title">交換次數變化</div>
                        <svg id="swap-chart" width="100%" height="200"></svg>
                    </div>
                    
                    <div class="comparison-container">
                        <div>
                            <h4>當前執行狀態</h4>
                            <p><strong>實際交換次數:</strong> <span id="actual-swaps">0</span></p>
                            <p><strong>實際比較次數:</strong> <span id="actual-comparisons">0</span></p>
                            <p><strong>當前複雜度:</strong> <span id="current-complexity">O(1)</span></p>
                        </div>
                        <div>
                            <h4>理論預期</h4>
                            <p><strong>最壞情況交換:</strong> <span id="worst-case-swaps">0</span></p>
                            <p><strong>最壞情況比較:</strong> <span id="worst-case-comparisons">0</span></p>
                            <p><strong>平均情況:</strong> <span id="average-case">O(n²)</span></p>
                        </div>
                    </div>
                </div>

                <!-- 理論分析 -->
                <div class="complexity-content" id="theoretical">
                    <h4>氣泡排序時間複雜度</h4>
                    <ul>
                        <li><strong>最壞情況 O(n²):</strong> 當數組完全逆序時，需要進行 n(n-1)/2 次比較和交換</li>
                        <li><strong>平均情況 O(n²):</strong> 隨機數組的期望比較和交換次數約為 n²/4</li>
                        <li><strong>最好情況 O(n):</strong> 當數組已經排序時，只需要一輪遍歷即可確定</li>
                    </ul>
                    
                    <h4>空間複雜度</h4>
                    <p><strong>O(1):</strong> 氣泡排序是原地排序算法，只需要常數級別的額外空間來存儲臨時變量</p>
                    
                    <h4>穩定性</h4>
                    <p>氣泡排序是<strong>穩定</strong>的排序算法，相等元素的相對位置不會改變</p>
                </div>

                <!-- 比較圖表 -->
                <div class="complexity-content" id="comparison">
                    <div class="chart-container">
                        <div class="chart-title">不同數組大小的複雜度比較</div>
                        <svg id="complexity-chart" width="100%" height="300"></svg>
                    </div>
                    <p style="text-align: center; margin-top: 10px; color: #666;">
                        此圖表顯示了不同數組大小下氣泡排序的理論時間複雜度曲線
                    </p>
                </div>
            </div>
            
            <h3>演算法說明</h3>
            <p>氣泡排序的原理是通過重複遍歷數組，比較相鄰元素並交換順序錯誤的元素對，每次遍歷至少會將一個元素移動到其最終位置。</p>
            
            <h3>時間複雜度</h3>
            <ul>
                <li>最壞情況: O(n²)</li>
                <li>平均情況: O(n²)</li>
                <li>最好情況: O(n) - 當數組已經排序時</li>
            </ul>
            
            <h3>空間複雜度</h3>
            <p>O(1) - 只需要常數級別的額外空間</p>
            
            <div class="code-container">
                <div class="code-tabs">
                    <div class="code-tab active" data-code="pseudo-bubble">演算法</div>
                    <div class="code-tab" data-code="python-bubble">Python</div>
                    <div class="code-tab" data-code="cpp-bubble">C++</div>
                    <div class="code-tab" data-code="c-bubble">C</div>
                    <div class="code-tab" data-code="js-bubble">JavaScript</div>
                </div>
                
                <div class="code-view" id="js-bubble">
function bubbleSort(arr) {
    const n = arr.length;
    let swapped;
    
    do {
        swapped = false;
        for (let i = 0; i < n - 1; i++) {
            if (arr[i] > arr[i + 1]) {
                // 交換元素
                [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];
                swapped = true;
            }
        }
    } while (swapped);
    
    return arr;
}
                </div>
                
                <div class="code-view" id="python-bubble">
def bubble_sort(arr):
    n = len(arr)
    
    for i in range(n):
        swapped = False
        
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                # 交換元素
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                swapped = True
                
        # 如果內循環中沒有交換，則數組已排序
        if not swapped:
            break
            
    return arr
                </div>
                
                <div class="code-view" id="cpp-bubble">
#include <vector>

std::vector<int> bubbleSort(std::vector<int> arr) {
    int n = arr.size();
    bool swapped;
    
    do {
        swapped = false;
        for (int i = 0; i < n - 1; i++) {
            if (arr[i] > arr[i + 1]) {
                // 交換元素
                std::swap(arr[i], arr[i + 1]);
                swapped = true;
            }
        }
    } while (swapped);
    
    return arr;
}
                </div>
                
                <div class="code-view" id="c-bubble">
#include <stdbool.h>

void bubbleSort(int arr[], int n) {
    bool swapped;
    
    do {
        swapped = false;
        for (int i = 0; i < n - 1; i++) {
            if (arr[i] > arr[i + 1]) {
                // 交換元素
                int temp = arr[i];
                arr[i] = arr[i + 1];
                arr[i + 1] = temp;
                swapped = true;
            }
        }
    } while (swapped);
}
                </div>
                
                <div class="code-view active" id="pseudo-bubble">
## 氣泡排序算法

輸入: 一個數組 array
輸出: 排序後的數組

1. 取得數組長度 n
2. 重複以下步驟:
   a. 設置交換旗標 swapped = false
   b. 從索引 0 開始到 n-2:
      i. 比較相鄰元素 array[i] 和 array[i+1]
      ii. 如果 array[i] > array[i+1]:
          - 交換兩個元素
          - 設置 swapped = true
   c. 如果 swapped = false，表示沒有發生交換，數組已排序完成，結束算法
3. 返回排序後的數組
                </div>
            </div>
        </div>
    </div>
    
    <!-- 載入所需的腳本檔案 -->
    <script src="bubble-sort-d3.js"></script>
    <script src="complexity-analysis.js"></script>
    <script src="../../navbar.js"></script>
    <script>
        // 頁簽切換功能（簡化版，僅用於直接導航）
        document.addEventListener('DOMContentLoaded', function() {
            // 初始化程式碼選項卡
            initCodeTabs();
            
            // 初始化複雜度分析功能
            initComplexityAnalysis();
            
            // 頁簽點擊事件 - 導航到對應頁面
            const tabs = document.querySelectorAll('.tab');
            tabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    const algorithmName = this.getAttribute('data-tab');
                    if (algorithmName !== 'bubble') {
                        window.location.href = `../${algorithmName}-sort/${algorithmName}.html`;
                    }
                });
            });
            
            // 為進度條添加滑塊拖曳效果
            const speedSlider = document.getElementById('bubble-speed');
            
            function updateSliderProgress(slider) {
                const percent = ((slider.value - slider.min) / (slider.max - slider.min)) * 100;
                slider.style.setProperty('--progress-percent', `${percent}%`);
            }
            
            // 初始更新進度
            updateSliderProgress(speedSlider);
            
            // 監聽值變化
            speedSlider.addEventListener('input', function() {
                updateSliderProgress(this);
            });
        });

        // 程式碼選項卡切換功能
        function initCodeTabs() {
            const codeTabs = document.querySelectorAll('.code-tab');
            
            codeTabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    const codeId = tab.getAttribute('data-code');
                    const parentContainer = tab.closest('.code-container');
                    
                    // 移除該容器內所有活動狀態
                    parentContainer.querySelectorAll('.code-tab').forEach(t => t.classList.remove('active'));
                    parentContainer.querySelectorAll('.code-view').forEach(view => view.classList.remove('active'));
                    
                    // 設置活動狀態
                    tab.classList.add('active');
                    document.getElementById(codeId).classList.add('active');
                });
            });
        }
    </script>
</body>
</html>